{"version":3,"sources":["components/CityInput/index.js","components/CityWeather/index.js","App.js","reportWebVitals.js","index.js"],"names":["CityInput","city","setCity","fetchCityWeather","React","useState","error","setError","Container","Form","Group","controlId","Label","Control","value","type","placeholder","onChange","event","target","className","Button","variant","onClick","CityWeather","cityWeather","Card","style","marginTop","width","height","Body","Title","color","Subtitle","Math","floor","temp","Text","fontWeight","feels_like","humidity","App","setCityWeather","fetch","then","response","json","result","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAwCeA,EArCG,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,iBAAuB,EAC/BC,IAAMC,SAAS,IADgB,mBAClDC,EADkD,KAC3CC,EAD2C,KAgBzD,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACE,cAACF,EAAA,EAAKG,MAAN,mBACA,cAACH,EAAA,EAAKI,QAAN,CACEC,MAAOb,EACPc,KAAK,OACLC,YAAY,aACZC,SAtBgB,SAACC,GACzBhB,EAAQgB,EAAMC,OAAOL,UAuBf,mBAAGM,UAAU,cAAb,SAA4Bd,OAE9B,cAACe,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAtBX,SAACL,GACfjB,GAGHM,EAAS,IACTJ,KAHAI,EAAS,yBAoBP,0B,QCNOiB,G,MAtBK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaxB,EAAW,EAAXA,KAClC,OACE,iCACE,cAACyB,EAAA,EAAD,CAAMC,MAAO,CAAEC,UAAW,KAAMC,MAAO,QAASC,OAAQ,SAAxD,SACE,eAACJ,EAAA,EAAKK,KAAN,CAAWX,UAAU,MAArB,UACE,eAACM,EAAA,EAAKM,MAAN,CAAYL,MAAO,CAAEM,MAAO,SAA5B,wBAAmDhC,KACnD,eAACyB,EAAA,EAAKQ,SAAN,CAAed,UAAU,oBAAzB,mBACSe,KAAKC,MAAMX,EAAYY,KAAO,KADvC,OAGA,eAACX,EAAA,EAAKY,KAAN,CAAWlB,UAAU,aAArB,UACE,uBACA,sBAAMO,MAAO,CAAEY,WAAY,QAA3B,0BAAyD,IACxDJ,KAAKC,MAAMX,EAAYe,WAAa,KAHvC,IAG6C,uBAC3C,sBAAMb,MAAO,CAAEY,WAAY,QAA3B,uBAAsD,IACrDd,EAAYgB,SALf,gBCiBKC,MA1Bf,WAAgB,IAAD,EACWtC,IAAMC,SAAS,IAD1B,mBACNJ,EADM,KACAC,EADA,OAEyBE,IAAMC,SAAS,IAFxC,mBAENoB,EAFM,KAEOkB,EAFP,KAab,OACE,qCACE,cAAC,EAAD,CACE1C,KAAMA,EACNC,QAASA,EACTC,iBAdmB,WACvByC,MAAM,oDAAD,OACiD3C,EADjD,4CAGF4C,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLL,EAAeK,EAAOC,YAWxB,cAAC,EAAD,CAAaxB,YAAaA,EAAaxB,KAAMA,QCbpCiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.178713b6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Button, Container } from \"react-bootstrap\";\r\n\r\nconst CityInput = ({ city, setCity, fetchCityWeather }) => {\r\n  const [error, setError] = React.useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setCity(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    if (!city) {\r\n      setError(\"City field is empty!\");\r\n    } else {\r\n      setError(\"\");\r\n      fetchCityWeather();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Form>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>City</Form.Label>\r\n          <Form.Control\r\n            value={city}\r\n            type=\"text\"\r\n            placeholder=\"Enter City\"\r\n            onChange={handleInputChange}\r\n          />\r\n          <p className=\"text-danger\">{error}</p>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" onClick={handleSubmit}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CityInput;\r\n","import React from \"react\";\r\nimport { Card, Container } from \"react-bootstrap\";\r\nimport \"D:/react Project/weather-app/src/components/CityWeather/style.css\";\r\n\r\nconst CityWeather = ({ cityWeather, city }) => {\r\n  return (\r\n    <center>\r\n      <Card style={{ marginTop: \"5%\", width: \"25rem\", height: \"16rem\" }}>\r\n        <Card.Body className=\"abc\">\r\n          <Card.Title style={{ color: \"white\" }}>Weather in {city}</Card.Title>\r\n          <Card.Subtitle className=\"mb-2 text-warning\">\r\n            temp: {Math.floor(cityWeather.temp - 273)}C\r\n          </Card.Subtitle>\r\n          <Card.Text className=\"text-white\">\r\n            <br></br>\r\n            <span style={{ fontWeight: \"bold\" }}>feels like: </span>{\" \"}\r\n            {Math.floor(cityWeather.feels_like - 273)}C<br></br>\r\n            <span style={{ fontWeight: \"bold\" }}>humidity:</span>{\" \"}\r\n            {cityWeather.humidity}%\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </center>\r\n  );\r\n};\r\n\r\nexport default CityWeather;\r\n","import \"./App.css\";\nimport CityInput from \"./components/CityInput\";\nimport CityWeather from \"./components/CityWeather\";\nimport React from \"react\";\nfunction App() {\n  const [city, setCity] = React.useState(\"\");\n  const [cityWeather, setCityWeather] = React.useState(\"\");\n\n  const fetchCityWeather = () => {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=4c496af33d732297c30b641b3b235e47`\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        setCityWeather(result.main);\n      });\n  };\n  return (\n    <>\n      <CityInput\n        city={city}\n        setCity={setCity}\n        fetchCityWeather={fetchCityWeather}\n      />\n\n      <CityWeather cityWeather={cityWeather} city={city} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}